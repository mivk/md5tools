#!/bin/bash

# Do md5 files for all subdirectories

ver=0.1.4
me=$(basename "$0")


#### DEFAULTS

# Without the .md5 extension, which will be added automatically
md5_filename=checksums


#### FUNCTIONS

usage() {
        cat <<EOF

    Usage: $me [options] DIRECTORY

    Options:
        -f Filename : Filename for checksums (without extension. eg. "-f cs-md5". Default: $md5_filename)
        -d          : Debug (can be repeated)
        -V          : show version and exit
        -h          : This help

EOF
}

die() {
    echo "$@" 1>&2
    exit 1;
}

warn() {
    er="$@"
    echo "$er" 1>&2
    errors+=("$er")
}


confirm() {
    while true; do
        read -p "$* [y/n]: " yn
        case $yn in
            [Yy]*) return 0  ;;
            [Nn]*) echo "Aborted" ; return 1 ;;
        esac
    done
}


#### PARSE ARGUMENTS

while getopts "df:Vh" opt; do
    case $opt in
        d) (( debug+=1 ));;
        f) md5_filename=$OPTARG;;
        V) echo "$0 version $ver"; exit;;
        h) usage; exit;;
    esac
done
shift $((OPTIND -1))


dir=$(realpath -e "$1")

if [ -z "$dir" ]; then
	usage
	die "Error: missing or wrong folder '$1'. Specify existing folder to process."
fi

if [ "$dir" = "/" ]; then
	die "Refusing to do it on system root '$dir'"
fi


#### OTHER INIT

# Check OS to select md5 command
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    md5cmd="md5sum"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Mac OSX
    md5cmd="md5 -r"
else
    die "Error: unknown OS '$OSTYPE'. Don't know correct md5 command."
fi
(( debug )) && echo "DEBUG: md5 command set to '$md5cmd'"


#### START

start_time=$(date "+%F_%T")

(( debug )) && echo "DEBUG: dir='$dir'" >&2

#check dir exists etc / no: done above w. realpath
# [ -d "$dir" ] || die "Error: direcotry '$dir' not found."

# go to and save base directory
#? use $(realpath "$PWD") instead of $PWD ?
start_dir="$PWD"
basedir="$PWD"
cd "$dir"

# Find all folders to process

declare -a subdirs=()
declare -a wanted=()
declare -a skipped=()

# 1. find all non-hidden subdirectories (not if the name begins with "." like ".Trashes", ".Spotlight-V100", etc.)
#while read d; do subdirs+=("$d"); done < <(find . -type d -not -name ".*" | LC_ALL=C sort)
while IFS= read -r; do subdirs+=("$REPLY"); done < <(find . -type d -not -name ".*" | LC_ALL=C sort)

# 2. count files and if there are any, add dir to wanted
for d in "$basedir" "${subdirs[@]}"; do  # include "." (= "$dir" itself), not only it's subdirs

	# todo: skip if has .md5?
	found_md5="$(find "$d" -maxdepth 1 -name '*.md5' -print -quit)"
	if [ -n "$found_md5" ]; then
		warn "Skipping '$d'. It already has '$found_md5'"
		skipped+=("$d ($found_md5)")
		continue
	fi

	cnt_files=$(find "$d" -maxdepth 1 -type f -not -name ".DS_Store" -not -name "._*" -not -name "*.md5" | wc -l)

	# todo: skip DCPs?

	(( cnt_files )) || continue
	(( total_files += cnt_files ))

	wanted+=("$d")
done

echo "Found ${#wanted[@]} folders to process:"
printf "  * %s\n", "${wanted[@]}"

total_size=$( du -sm . 2>/dev/null | { read s x; echo "$s"; } )
echo "total size = $total_size MiB."


# Do you want to start?
confirm "Start processing $total_size MiB." || exit 0;


for d in "${wanted[@]}"; do
    if [ -f "$d/$md5_filename.md5" ]; then
        echo "$d/$md5_filename.md5 file exists already. skipping"
		# fixme: add to list of skipped files
        continue
    fi

    echo "Processing $d"
    cd "$d"
    find . -maxdepth 1 -type f -not -name "$md5_filename.md5" -not -name '.DS_Store' -not -name "._*" \
    | LC_ALL=C sort \
    | while read f; do
        $md5cmd "$f" | tee -a "$md5_filename.md5"
      done
    echo
    # fixme: check exit status of md5 cmd ?!?
done

cd "$basedir"

end_time=$(date "+%F_%T")

echo "Done:"
echo "Started at  $start_time"
echo "Finished at $end_time"
cd "$start_dir"
